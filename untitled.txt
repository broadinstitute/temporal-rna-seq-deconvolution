            
    def guide(
            self,
            x_ng: torch.Tensor,
            t_n: torch.Tensor,
            ind_index_n: torch.Tensor,
            sample_index_n: torch.Tensor):
        
        minibatch_size = x_ng.shape[0]
        
        # variational parameters for log_phi_g
        log_phi_posterior_loc_g = pyro.param(
            "log_phi_posterior_loc_g",
            self.log_phi_posterior_loc * torch.ones(
                (self.dataset.num_genes,), device=self.device, dtype=self.dtype))
        log_phi_posterior_scale_g = pyro.param(
            "log_phi_posterior_scale_g",
            self.log_phi_posterior_scale * torch.ones(
                (self.dataset.num_genes,), device=self.device, dtype=self.dtype),
            constraint=constraints.positive)

        # variational parameters for log_beta_g
        log_beta_posterior_loc_g = pyro.param(
            "log_beta_posterior_loc_g",
            torch.zeros(
                (self.dataset.num_genes,), device=self.device, dtype=self.dtype))        
        log_beta_posterior_scale_g = pyro.param(
            "log_beta_posterior_scale_g",
            self.log_phi_posterior_scale * torch.ones(
                (self.dataset.num_genes,), device=self.device, dtype=self.dtype),
            constraint=constraints.positive)
        
        # variational parameters for log_r_i
        log_r_posterior_loc_i = pyro.param(
            "log_r_posterior_loc_i",
            torch.zeros(
                (self.dataset.num_individuals,), device=self.device, dtype=self.dtype))
        log_r_posterior_scale_i = pyro.param(
            "log_r_posterior_scale_i",
            self.log_r_posterior_scale * torch.ones(
                (self.dataset.num_individuals,), device=self.device, dtype=self.dtype),
            constraint=constraints.positive)
        
        # variational parameters for unnorm_cell_pop_base_c ("B_c")
        unnorm_cell_pop_base_posterior_loc_c = pyro.param(
            "unnorm_cell_pop_base_posterior_loc_c",
            torch.tensor(
                self.unnorm_cell_pop_base_posterior_loc_c,
                device=self.device, dtype=self.dtype))
        unnorm_cell_pop_base_posterior_scale_c = pyro.param(
            "unnorm_cell_pop_base_posterior_scale_c",
            torch.tensor(
                self.unnorm_cell_pop_base_posterior_scale_c,
                device=self.device, dtype=self.dtype),
            constraint=constraints.positive)
        
        # variational parameters for unnorm_cell_pop_deform_c ("R_c")
        unnorm_cell_pop_deform_posterior_loc_c = pyro.param(
            "unnorm_cell_pop_deform_posterior_loc_c",
            torch.tensor(
                self.unnorm_cell_pop_deform_posterior_loc_c,
                device=self.device, dtype=self.dtype))
        unnorm_cell_pop_deform_posterior_scale_c = pyro.param(
            "unnorm_cell_pop_deform_posterior_scale_c",
            torch.tensor(
                self.unnorm_cell_pop_deform_posterior_scale_c,
                device=self.device, dtype=self.dtype),
            constraint=constraints.positive)
        
        # variational parameters for tau_deviation_m
        tau_deviation_posterior_loc_m = pyro.param(
            "tau_deviation_posterior_loc_m",
            torch.zeros(
                (self.dataset.num_samples,),
                device=self.device, dtype=self.dtype))
        tau_deviation_posterior_scale_m = pyro.param(
            "tau_deviation_posterior_scale_m",
            self.tau_posterior_scale * torch.ones(
                (self.dataset.num_samples,),
                device=self.device, dtype=self.dtype),
            constraint=constraints.positive)
        
        # posterior sample statements
        log_phi_g = pyro.sample(
            "log_phi_g",
            dist.Normal(
                loc=log_phi_posterior_loc_g,
                scale=log_phi_posterior_scale_g).to_event(1))

        log_beta_g = pyro.sample(
            "log_beta_g",
            dist.Normal(
                loc=log_beta_posterior_loc_g,
                scale=log_beta_posterior_scale_g).to_event(1))

        log_r_i = pyro.sample(
            "log_r_i",
            dist.Normal(
                loc=log_r_posterior_loc_i,
                scale=log_r_posterior_scale_i).to_event(1))

        unnorm_cell_pop_base_c = pyro.sample(
            'unnorm_cell_pop_base_c',
            dist.Normal(
                loc=unnorm_cell_pop_base_posterior_loc_c,
                scale=unnorm_cell_pop_base_posterior_scale_c).to_event(1))
        
        unnorm_cell_pop_deform_c = pyro.sample(
            'unnorm_cell_pop_deform_c',
            dist.Normal(
                loc=unnorm_cell_pop_deform_posterior_loc_c,
                scale=unnorm_cell_pop_deform_posterior_scale_c).to_event(1))
        
        with pyro.poutine.scale(scale=self.dataset.num_samples / minibatch_size):

            with pyro.plate("batch"):
            
                tau_deviation_n = pyro.sample(
                    "tau_deviation_n",
                    dist.Normal(
                        loc=tau_deviation_posterior_loc_m[sample_index_n],
                        scale=tau_deviation_posterior_scale_m[sample_index_n]))